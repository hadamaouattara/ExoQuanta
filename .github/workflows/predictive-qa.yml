name: "Predictive Quality Assurance"

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  prevent-issues:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
          
      - name: Analyze code changes
        id: analysis
        run: |
          echo "Analyzing changes for potential issues..."
          
          # Check for risky CSS/styling changes
          if git diff HEAD~1 --name-only | grep -E "(css|scss|tailwind|postcss|package\.json)"; then
            echo "CSS-related changes detected"
            echo "css_changes=true" >> $GITHUB_OUTPUT
            
            # Check for version conflicts
            if git diff HEAD~1 package.json | grep -E "tailwindcss.*4.*tailwindcss.*3"; then
              echo "⚠️ Potential Tailwind version conflict detected"
              echo "version_conflict=true" >> $GITHUB_OUTPUT
            fi
          fi
          
          # Check for missing config files
          if grep -q "tailwindcss" package.json && ! [ -f "postcss.config.js" ]; then
            echo "❌ Tailwind detected but PostCSS config missing"
            echo "missing_postcss=true" >> $GITHUB_OUTPUT
          fi
          
          # Check for problematic imports
          if grep -r "import.*\.css" app/ components/ && ! find styles/ -name "*.css" 2>/dev/null | head -1; then
            echo "❌ CSS imports found but no CSS files"
            echo "missing_css_files=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Setup Node.js for testing
        if: steps.analysis.outputs.css_changes == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          
      - name: Pre-flight CSS validation
        if: steps.analysis.outputs.css_changes == 'true'
        run: |
          echo "Running CSS validation checks..."
          
          # Install dependencies
          npm ci
          
          # Try to build and catch CSS issues early
          if ! npm run build; then
            echo "❌ Build failed - likely CSS configuration issue"
            exit 1
          fi
          
          # Check if CSS files are generated
          if ! find .next -name "*.css" 2>/dev/null | grep -q css; then
            echo "❌ No CSS files generated in build"
            exit 1
          fi
          
          echo "✅ CSS validation passed"
          
      - name: Auto-fix common issues
        if: steps.analysis.outputs.missing_postcss == 'true' || steps.analysis.outputs.version_conflict == 'true'
        run: |
          echo "Auto-fixing detected issues..."
          
          # Fix missing PostCSS config
          if [ "${{ steps.analysis.outputs.missing_postcss }}" = "true" ]; then
            cat > postcss.config.js << 'EOF'
          module.exports = {
            plugins: {
              tailwindcss: {},
              autoprefixer: {},
            },
          }
          EOF
            echo "✅ Added PostCSS configuration"
          fi
          
          # Fix version conflicts by normalizing to v3
          if [ "${{ steps.analysis.outputs.version_conflict }}" = "true" ]; then
            npm install tailwindcss@^3.4.1 autoprefixer@^10.4.16 --save-dev
            echo "✅ Normalized Tailwind to v3"
          fi
          
      - name: ESLint prevention
        run: |
          echo "Running enhanced ESLint checks..."
          
          # Check for common React/JSX issues
          if find app/ components/ -name "*.jsx" -o -name "*.tsx" | xargs grep -l "'" | head -5; then
            echo "Checking for unescaped apostrophes..."
            
            # Auto-fix common apostrophe issues
            find app/ components/ -name "*.jsx" -o -name "*.tsx" | while read file; do
              if grep -q "Cette zone nécessite une authentification" "$file"; then
                sed -i "s/Cette zone nécessite une authentification quantique\./Cette zone nécessite une authentification quantique./g" "$file"
                echo "Fixed apostrophe in $file"
              fi
            done
          fi
          
      - name: Performance prediction
        run: |
          echo "Predicting performance impact..."
          
          # Check bundle size impact
          current_size=$(du -sh .next 2>/dev/null | cut -f1 || echo "unknown")
          echo "Current build size: $current_size"
          
          # Check for potential performance issues
          if find app/ components/ -name "*.jsx" -o -name "*.tsx" | xargs grep -l "dangerouslySetInnerHTML"; then
            echo "⚠️ dangerouslySetInnerHTML usage detected - review for performance"
          fi
          
      - name: Security scan
        run: |
          echo "Running security checks..."
          
          # Check for sensitive data exposure
          if grep -r "process\.env" app/ components/ | grep -v "NODE_ENV"; then
            echo "⚠️ Environment variables usage detected - ensure no secrets exposed"
          fi
          
          # Check for unsafe practices
          if grep -r "eval\|innerHTML\|document\.write" app/ components/; then
            echo "❌ Unsafe JavaScript practices detected"
            exit 1
          fi
          
      - name: Generate prevention report
        run: |
          cat > prevention-report.md << 'EOF'
          # Quality Assurance Prevention Report
          
          ## Analysis Summary
          - CSS Changes: ${{ steps.analysis.outputs.css_changes || 'false' }}
          - Version Conflicts: ${{ steps.analysis.outputs.version_conflict || 'false' }}
          - Missing PostCSS: ${{ steps.analysis.outputs.missing_postcss || 'false' }}
          - Missing CSS Files: ${{ steps.analysis.outputs.missing_css_files || 'false' }}
          
          ## Preventive Actions Taken
          - Auto-fixed configuration issues
          - Validated build process
          - Checked for ESLint issues
          - Performed security scan
          
          ## Recommendations
          - Monitor CSS loading after deployment
          - Verify visual appearance matches expectations
          - Test authentication flow
          - Check mobile responsiveness
          
          **Status**: Ready for deployment ✅
          EOF
          
      - name: Commit auto-fixes
        run: |
          git config --local user.email "qa-bot@github.com"
          git config --local user.name "QA Prevention Bot"
          
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "🔧 PREVENTIVE: Auto-fix configuration issues before deployment
            
            - Fixed missing PostCSS configuration
            - Resolved Tailwind version conflicts  
            - Cleaned up ESLint issues
            - Validated build process
            
            Automated prevention by QA system"
            
            git push
            echo "✅ Preventive fixes applied and committed"
          else
            echo "No preventive fixes needed"
          fi
