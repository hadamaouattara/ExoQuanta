name: üìä Universal Health Monitor - Post Deployment Validation

on:
  workflow_run:
    workflows: ["üõ°Ô∏è Universal Quality Gate - Zero Error Deployment"]
    types: [completed]
  schedule:
    # Run health check every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    # Allow manual trigger

jobs:
  detect-deployment:
    name: üîç Deployment Detection
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    outputs:
      project_type: ${{ steps.detect.outputs.project_type }}
      has_deployment: ${{ steps.detect.outputs.has_deployment }}
      deployment_url: ${{ steps.detect.outputs.deployment_url }}
      
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
      
    - name: üîç Detect Deployment Configuration
      id: detect
      run: |
        echo "üîç Detecting deployment configuration..."
        
        PROJECT_TYPE="generic"
        HAS_DEPLOYMENT="false"
        DEPLOYMENT_URL=""
        
        # Check for Netlify
        if [ -f "netlify.toml" ] || [ -f "_redirects" ]; then
          echo "üåê Netlify deployment detected"
          HAS_DEPLOYMENT="true"
          
          # Try to extract site URL from README or config
          if grep -q "netlify.app" README.md 2>/dev/null; then
            DEPLOYMENT_URL=$(grep -o "https://[^)]*\.netlify\.app" README.md | head -1)
          fi
        fi
        
        # Check for Vercel
        if [ -f "vercel.json" ] || [ -d ".vercel" ]; then
          echo "‚ñ≤ Vercel deployment detected"
          HAS_DEPLOYMENT="true"
        fi
        
        # Check for Firebase
        if [ -f "firebase.json" ]; then
          echo "üî• Firebase deployment detected"
          HAS_DEPLOYMENT="true"
        fi
        
        # Detect project type
        if [ -f "package.json" ]; then
          if grep -q "next" package.json; then
            PROJECT_TYPE="nextjs"
          elif grep -q "react" package.json; then
            PROJECT_TYPE="react"
          fi
        fi
        
        echo "üìä Detection Results:"
        echo "- Project Type: $PROJECT_TYPE"
        echo "- Has Deployment: $HAS_DEPLOYMENT"
        echo "- Deployment URL: $DEPLOYMENT_URL"
        
        echo "project_type=$PROJECT_TYPE" >> $GITHUB_OUTPUT
        echo "has_deployment=$HAS_DEPLOYMENT" >> $GITHUB_OUTPUT
        echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

  health-monitor:
    name: üè• System Health Check
    runs-on: ubuntu-latest
    needs: detect-deployment
    timeout-minutes: 10
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
      
    - name: üü¢ Setup Node.js
      if: needs.detect-deployment.outputs.project_type != 'generic'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: üîç Deep Structure Validation
      run: |
        echo "üîç Performing deep structure validation..."
        
        PROJECT_TYPE="${{ needs.detect-deployment.outputs.project_type }}"
        
        # Universal file checks
        echo "üìÅ Checking universal project structure..."
        
        if [ ! -f "README.md" ]; then
          echo "‚ö†Ô∏è WARNING: README.md missing"
        else
          echo "‚úÖ README.md found"
        fi
        
        if [ ! -f ".gitignore" ]; then
          echo "‚ö†Ô∏è WARNING: .gitignore missing"
        else
          echo "‚úÖ .gitignore found"
        fi
        
        # Project-specific validation
        case $PROJECT_TYPE in
          "nextjs")
            echo "üöÄ Next.js health validation..."
            
            REQUIRED_FILES=("package.json" "next.config.js")
            
            for file in "${REQUIRED_FILES[@]}"; do
              if [ -f "$file" ]; then
                echo "‚úÖ Found: $file"
              else
                echo "‚ùå CRITICAL: Missing $file"
                exit 1
              fi
            done
            
            # Check app directory structure
            if [ -d "app" ]; then
              echo "‚úÖ App Router structure detected"
              
              if [ ! -f "app/layout.jsx" ] && [ ! -f "app/layout.tsx" ]; then
                echo "‚ùå CRITICAL: app/layout missing"
                exit 1
              fi
              
              if [ ! -f "app/page.jsx" ] && [ ! -f "app/page.tsx" ]; then
                echo "‚ùå CRITICAL: app/page missing"
                exit 1
              fi
            elif [ -d "pages" ]; then
              echo "‚úÖ Pages Router structure detected"
            else
              echo "‚ö†Ô∏è WARNING: No Next.js routing structure found"
            fi
            ;;
            
          "react")
            echo "‚öõÔ∏è React health validation..."
            
            if [ -f "src/App.js" ] || [ -f "src/App.jsx" ] || [ -f "src/App.tsx" ]; then
              echo "‚úÖ React App component found"
            else
              echo "‚ùå CRITICAL: React App component missing"
              exit 1
            fi
            ;;
            
          *)
            echo "üì¶ Generic project validation..."
            ;;
        esac
        
        echo "‚úÖ Deep structure validation PASSED"
        
    - name: üîç Dependencies Health Check
      if: needs.detect-deployment.outputs.project_type != 'generic'
      run: |
        echo "üîç Checking dependencies health..."
        
        # Install dependencies
        npm ci --prefer-offline --no-audit
        
        # Quick security audit
        echo "üîí Running security audit..."
        npm audit --audit-level high || echo "‚ö†Ô∏è High severity vulnerabilities found"
        
        # Check for outdated packages
        echo "üì¶ Checking for outdated packages..."
        npm outdated || echo "‚ÑπÔ∏è Some packages may be outdated"
        
        # Verify package-lock integrity
        if [ -f "package-lock.json" ]; then
          echo "üîê Verifying package-lock integrity..."
          npm ci --dry-run
        fi
        
        echo "‚úÖ Dependencies health check PASSED"
        
    - name: üèóÔ∏è Build Integrity Test
      if: needs.detect-deployment.outputs.project_type != 'generic'
      run: |
        echo "üèóÔ∏è Testing build integrity..."
        
        # Clean previous builds
        rm -rf .next out dist build
        
        # Test build process
        if npm run build; then
          echo "‚úÖ Build successful"
          
          # Check build output
          PROJECT_TYPE="${{ needs.detect-deployment.outputs.project_type }}"
          
          case $PROJECT_TYPE in
            "nextjs")
              if [ -d ".next" ] || [ -d "out" ]; then
                echo "‚úÖ Next.js build output verified"
                
                # Check build size
                if [ -d "out" ]; then
                  BUILD_SIZE=$(du -sh out 2>/dev/null | cut -f1)
                elif [ -d ".next" ]; then
                  BUILD_SIZE=$(du -sh .next 2>/dev/null | cut -f1)
                fi
                
                echo "üì¶ Build size: ${BUILD_SIZE:-Unknown}"
              else
                echo "‚ùå CRITICAL: No build output found"
                exit 1
              fi
              ;;
              
            "react")
              if [ -d "build" ] || [ -d "dist" ]; then
                echo "‚úÖ React build output verified"
              else
                echo "‚ùå CRITICAL: No build output found"
                exit 1
              fi
              ;;
          esac
        else
          echo "‚ùå CRITICAL: Build failed"
          exit 1
        fi
        
        echo "‚úÖ Build integrity test PASSED"

  deployment-health:
    name: üåê Deployment Health Check
    runs-on: ubuntu-latest
    needs: [detect-deployment, health-monitor]
    if: needs.detect-deployment.outputs.has_deployment == 'true' && success()
    
    steps:
    - name: üåê Test Deployment Accessibility
      run: |
        echo "üåê Testing deployment accessibility..."
        
        DEPLOYMENT_URL="${{ needs.detect-deployment.outputs.deployment_url }}"
        
        if [ -n "$DEPLOYMENT_URL" ]; then
          echo "üîó Testing URL: $DEPLOYMENT_URL"
          
          # Test HTTP response
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOYMENT_URL" || echo "000")
          
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "‚úÖ Deployment is accessible (HTTP $HTTP_STATUS)"
          else
            echo "‚ö†Ô∏è WARNING: Deployment returned HTTP $HTTP_STATUS"
          fi
          
          # Test response time
          RESPONSE_TIME=$(curl -s -o /dev/null -w "%{time_total}" "$DEPLOYMENT_URL" || echo "0")
          echo "‚è±Ô∏è Response time: ${RESPONSE_TIME}s"
          
          if [ -n "$RESPONSE_TIME" ] && [ "$RESPONSE_TIME" != "0" ]; then
            if (( $(echo "$RESPONSE_TIME < 2.0" | bc -l) )); then
              echo "‚úÖ Response time is good (<2s)"
            else
              echo "‚ö†Ô∏è WARNING: Slow response time (>2s)"
            fi
          fi
        else
          echo "‚ÑπÔ∏è No deployment URL configured for automated testing"
        fi

  performance-validation:
    name: ‚ö° Performance Validation
    runs-on: ubuntu-latest
    needs: health-monitor
    if: success()
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
      
    - name: ‚ö° Performance Analysis
      run: |
        echo "‚ö° Running performance analysis..."
        
        # File count analysis
        JS_COUNT=$(find . -name "*.js" -not -path "./node_modules/*" | wc -l)
        JSX_COUNT=$(find . -name "*.jsx" -not -path "./node_modules/*" | wc -l)
        TS_COUNT=$(find . -name "*.ts" -not -path "./node_modules/*" | wc -l)
        TSX_COUNT=$(find . -name "*.tsx" -not -path "./node_modules/*" | wc -l)
        
        echo "üìä Code Metrics:"
        echo "- JavaScript files: $JS_COUNT"
        echo "- JSX files: $JSX_COUNT"
        echo "- TypeScript files: $TS_COUNT"
        echo "- TSX files: $TSX_COUNT"
        echo "- Total source files: $((JS_COUNT + JSX_COUNT + TS_COUNT + TSX_COUNT))"
        
        # Repository size analysis
        REPO_SIZE=$(du -sh . 2>/dev/null | cut -f1)
        echo "üì¶ Repository size: $REPO_SIZE"
        
        echo "‚úÖ Performance analysis completed"

  generate-health-report:
    name: üìä Generate Health Report
    runs-on: ubuntu-latest
    needs: [detect-deployment, health-monitor, deployment-health, performance-validation]
    if: always()
    
    steps:
    - name: üìä Compile Health Report
      run: |
        echo "üìä Generating comprehensive health report..."
        
        echo "=== UNIVERSAL HEALTH MONITOR REPORT ==="
        echo "Repository: ${{ github.repository }}"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Project Type: ${{ needs.detect-deployment.outputs.project_type }}"
        echo "Has Deployment: ${{ needs.detect-deployment.outputs.has_deployment }}"
        echo "Date: $(date)"
        echo ""
        
        echo "üè• HEALTH CHECK RESULTS:"
        
        if [ "${{ needs.health-monitor.result }}" = "success" ]; then
          echo "  ‚úÖ System Health: HEALTHY"
        else
          echo "  ‚ùå System Health: FAILED"
        fi
        
        if [ "${{ needs.deployment-health.result }}" = "success" ]; then
          echo "  ‚úÖ Deployment: ACCESSIBLE"
        elif [ "${{ needs.deployment-health.result }}" = "skipped" ]; then
          echo "  ‚ÑπÔ∏è Deployment: NOT CONFIGURED"
        else
          echo "  ‚ùå Deployment: ISSUES DETECTED"
        fi
        
        if [ "${{ needs.performance-validation.result }}" = "success" ]; then
          echo "  ‚úÖ Performance: OPTIMAL"
        else
          echo "  ‚ùå Performance: ISSUES DETECTED"
        fi
        
        echo ""
        
        # Overall status
        if [ "${{ needs.health-monitor.result }}" = "success" ]; then
          echo "üéØ OVERALL STATUS: SYSTEM HEALTHY ‚úÖ"
          echo "üöÄ Project is running optimally"
        else
          echo "üö® OVERALL STATUS: ATTENTION REQUIRED ‚ö†Ô∏è"
          echo "üîß Please review the issues above"
        fi

    - name: üö® Alert on Critical Issues
      if: needs.health-monitor.result == 'failure'
      run: |
        echo "üö® =========================================="
        echo "üö® CRITICAL HEALTH ISSUES DETECTED!"
        echo "üö® =========================================="
        echo "‚ùå System integrity compromised"
        echo "‚ùå Immediate attention required"
        echo ""
        echo "üìß Please check the logs above for details"
        echo "üîß Fix issues to ensure system stability"
        exit 1
